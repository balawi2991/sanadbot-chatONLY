generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bot       Bot?

  @@map("users")
}

model Bot {
  id               String            @id @default(cuid())
  userId           String            @unique
  name             String            @default("مساعد سند")
  color            String            @default("#3B82F6")
  logo             String?
  avatar           String?
  placeholder      String            @default("اكتب رسالتك هنا...")
  welcome          String            @default("مرحباً! كيف يمكنني مساعدتك اليوم؟")
  personality      String            @default("أنا مساعد ذكي ومفيد، أجيب على الأسئلة بطريقة ودودة ومهنية.")
  isActive         Boolean           @default(true)
  glowEffect       Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations        Conversation[]
  conversationSessions ConversationSession[]
  knowledgeSources     KnowledgeSource[]
  qas                  QA[]

  @@map("bots")
}

model KnowledgeSource {
  id        String   @id @default(cuid())
  botId     String
  type      String
  title     String
  content   String
  url       String?
  filename  String?
  filesize  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bot       Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@map("knowledge_sources")
}

model QA {
  id        String   @id @default(cuid())
  botId     String
  question  String
  answer    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bot       Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@map("qas")
}

model ConversationSession {
  id        String    @id @default(cuid())
  botId     String
  clientId  String
  title     String?   // عنوان الجلسة (أول سؤال أو ملخص)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bot       Bot       @relation(fields: [botId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("conversation_sessions")
}

model Message {
  id                    String              @id @default(cuid())
  conversationSessionId String
  sender                String              // "user" or "bot"
  content               String
  responseType          String?             // "qa", "rag", "fallback" (للرسائل من البوت فقط)
  createdAt             DateTime            @default(now())
  conversationSession   ConversationSession @relation(fields: [conversationSessionId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// الاحتفاظ بجدول المحادثات القديم للتوافق مع النظام الحالي
model Conversation {
  id           String   @id @default(cuid())
  botId        String
  clientId     String
  question     String
  answer       String
  responseType String
  createdAt    DateTime @default(now())
  bot          Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@map("conversations")
}
